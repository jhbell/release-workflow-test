name: Release

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      IS_PRERELEASE: ${{ github.event.release.prerelease }}
      TAG_NAME: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v2
      


      - name: Retrieve the package name and target version
        id: get-tag
        run: |
          package=$(echo ${{ env.TAG_NAME }} | cut -d/ -f 1)
          echo "Found desired package name $package"
          echo "::set-output name=package::$package"
          version=$(echo ${{ env.TAG_NAME }} | cut -d/ -f 2)
          echo "Found desired version $version"
          echo "::set-output name=version::$version"
          
      - name: Print the package and version  
        run: |
          echo "Package name is ${{ steps.get-tag.outputs.package }} and version to publish is ${{ steps.get-tag.outputs.version }}"

      - name: Retrieve the version in the corresponding package.json
        id: get-package-json
        run: |
          packageJson=$(cat ./${{ steps.get-tag.outputs.package }}/package.json)
          packageJson="${packageJson//'%'/'%25'}"
          packageJson="${packageJson//$'\n'/'%0A'}"
          packageJson="${packageJson//$'\r'/'%0D'}"
          echo "::set-output name=packageJson::$packageJson"
        
      - name: Print the version from the packageJson
        run: |
          echo "${{ fromJSON(steps.get-package-json.outputs.packageJson) }}"
          echo "${{ fromJSON(steps.get-package-json.outputs.packageJson).version }}"
      
      - name: Fail if package version does not match release version
        if: steps.get-tag.outputs.version != fromJSON(steps.get-package-json.outputs.packageJson).version
        run: exit 1
        
      - name: Publish the package
        run: |
          cd ./${{ steps.get-tag.outputs.package }}/
          if [ "$IS_PRERELEASE" = true ]; then tag=prerelease; else tag=latest; fi
          echo "Publishing ${{ steps.get-tag.outputs.package }} version ${{ steps.get-tag.outputs.version }} under the $tag tag."
          npm publish --dry-run --tag $tag 
